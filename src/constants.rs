pub const FT8_CHAR_TABLE_FULL:&str = " 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ+-./?";
pub const FT8_CHAR_TABLE_ALPHANUM_SPACE_SLASH:&str = " 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ/";
pub const FT8_CHAR_TABLE_ALPHANUM_SPACE:&str = " 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
pub const FT8_CHAR_TABLE_ALPHA_SPACE:&str = " ABCDEFGHIJKLMNOPQRSTUVWXYZ";
pub const FT8_CHAR_TABLE_GRIDSQUARE_ALPHA:&str = "ABCDEFGHIJKLMNOPQR";
pub const FT8_CHAR_TABLE_GRIDSQUARE_ALPHA_SIX:&str = "ABCDEFGHIJKLMNOPQRSTUVWX";
pub const FT8_CHAR_TABLE_ALPHANUM:&str = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
pub const FT8_CHAR_TABLE_NUMERIC:&str = "0123456789";

// https://github.com/vk3jpk/ft8-notes/blob/master/ft8.py#L29
// https://gist.github.com/NT7S/6e38d8a35d153f015d476bc49b40effb
// FT-8 CRC-14 polynomial without the leading (MSB) 1
// x^14 + x^13 + x^10 + x^9 + x^8 + x^6 + x^4 + x^2 + x^1 + 1
// 110011101010111
// drop msb
// 10011101010111
// 0x2757
pub const CRC_POLYNOMIAL:u16 = 0x2757;

pub const FT8_GRAY_CODE: [u8; 8] = [0, 1, 3, 2, 5, 6, 4, 7];

pub const TONE_COUNT: usize = 8;
pub const SYMBOL_RATE: f32 = 6.25;
pub const SAMPLE_RATE: f32 = 12_000.0;
pub const TONE_SPACING: f32 = 6.25;
pub const CHANNEL_SYMBOLS_COUNT: usize = 79;
pub const FT8_COSTAS: [u8; 7] = [3,1,4,0,6,5,2];

// reference: https://sourceforge.net/p/wsjt/wsjtx/ci/master/tree/lib/ft8/ldpc_174_91_c_generator.f90
// rather than a bunch of strings as in the fortran code, provide
// hex representations of each of the numbers. Drop the last bit
// since it is never used.
pub const FT8_LDPC_GENERATOR_MATRIX: [u128; 83] = [
    0x8329ce11bf31eaf509f27fc >> 1,
    0x761c264e25c259335493132 >> 1,
    0xdc265902fb277c6410a1bdc >> 1,
    0x1b3f417858cd2dd33ec7f62 >> 1,
    0x09fda4fee04195fd034783a >> 1,
    0x077cccc11b8873ed5c3d48a >> 1,
    0x29b62afe3ca036f4fe1a9da >> 1,
    0x6054faf5f35d96d3b0c8c3e >> 1,
    0xe20798e4310eed27884ae90 >> 1,
    0x775c9c08e80e26ddae56318 >> 1,
    0xb0b811028c2bf997213487c >> 1,
    0x18a0c9231fc60adf5c5ea32 >> 1,
    0x76471e8302a0721e01b12b8 >> 1,
    0xffbccb80ca8341fafb47b2e >> 1,
    0x66a72a158f9325a2bf67170 >> 1,
    0xc4243689fe85b1c51363a18 >> 1,
    0x0dff739414d1a1b34b1c270 >> 1,
    0x15b48830636c8b99894972e >> 1,
    0x29a89c0d3de81d665489b0e >> 1,
    0x4f126f37fa51cbe61bd6b94 >> 1,
    0x99c47239d0d97d3c84e0940 >> 1,
    0x1919b75119765621bb4f1e8 >> 1,
    0x09db12d731faee0b86df6b8 >> 1,
    0x488fc33df43fbdeea4eafb4 >> 1,
    0x827423ee40b675f756eb5fe >> 1,
    0xabe197c484cb74757144a9a >> 1,
    0x2b500e4bc0ec5a6d2bdbdd0 >> 1,
    0xc474aa53d70218761669360 >> 1,
    0x8eba1a13db3390bd6718cec >> 1,
    0x753844673a27782cc42012e >> 1,
    0x06ff83a145c37035a5c1268 >> 1,
    0x3b37417858cc2dd33ec3f62 >> 1,
    0x9a4a5a28ee17ca9c324842c >> 1,
    0xbc29f465309c977e89610a4 >> 1,
    0x2663ae6ddf8b5ce2bb29488 >> 1,
    0x46f231efe457034c1814418 >> 1,
    0x3fb2ce85abe9b0c72e06fbe >> 1,
    0xde87481f282c153971a0a2e >> 1,
    0xfcd7ccf23c69fa99bba1412 >> 1,
    0xf0261447e9490ca8e474cec >> 1,
    0x4410115818196f95cdd7012 >> 1,
    0x088fc31df4bfbde2a4eafb4 >> 1,
    0xb8fef1b6307729fb0a078c0 >> 1,
    0x5afea7acccb77bbc9d99a90 >> 1,
    0x49a7016ac653f65ecdc9076 >> 1,
    0x1944d085be4e7da8d6cc7d0 >> 1,
    0x251f62adc4032f0ee714002 >> 1,
    0x56471f8702a0721e00b12b8 >> 1,
    0x2b8e4923f2dd51e2d537fa0 >> 1,
    0x6b550a40a66f4755de95c26 >> 1,
    0xa18ad28d4e27fe92a4f6c84 >> 1,
    0x10c2e586388cb82a3d80758 >> 1,
    0xef34a41817ee02133db2eb0 >> 1,
    0x7e9c0c54325a9c15836e000 >> 1,
    0x3693e572d1fde4cdf079e86 >> 1,
    0xbfb2cec5abe1b0c72e07fbe >> 1,
    0x7ee18230c583cccc57d4b08 >> 1,
    0xa066cb2fedafc9f52664126 >> 1,
    0xbb23725abc47cc5f4cc4cd2 >> 1,
    0xded9dba3bee40c59b5609b4 >> 1,
    0xd9a7016ac653e6decdc9036 >> 1,
    0x9ad46aed5f707f280ab5fc4 >> 1,
    0xe5921c77822587316d7d3c2 >> 1,
    0x4f14da8242a8b86dca73352 >> 1,
    0x8b8b507ad467d4441df770e >> 1,
    0x22831c9cf1169467ad04b68 >> 1,
    0x213b838fe2ae54c38ee7180 >> 1,
    0x5d926b6dd71f085181a4e12 >> 1,
    0x66ab79d4b29ee6e69509e56 >> 1,
    0x958148682d748a38dd68baa >> 1,
    0xb8ce020cf069c32a723ab14 >> 1,
    0xf4331d6d461607e95752746 >> 1,
    0x6da23ba424b9596133cf9c8 >> 1,
    0xa636bcbc7b30c5fbeae67fe >> 1,
    0x5cb0d86a07df654a9089a20 >> 1,
    0xf11f106848780fc9ecdd80a >> 1,
    0x1fbb5364fb8d2c9d730d5ba >> 1,
    0xfcb86bc70a50c9d02a5d034 >> 1,
    0xa534433029eac15f322e34c >> 1,
    0xc989d9c7c3d3b8c55d75130 >> 1,
    0x7bb38b2f0186d46643ae962 >> 1,
    0x2644ebadeb44b9467d1f42c >> 1,
    0x608cc857594bfbb55d69600 >> 1 ];

// https://sourceforge.net/p/wsjt/wsjtx/ci/master/tree/lib/ft8/ldpc_174_91_c_parity.f90
// Because it was fortran, all the indicies were 1 based, so subtracted 1 from each. 
// Because it was a one dimmensional array, needed to nest them
pub const FT8_LDPC_VALUE_TO_CHECK: &'static [&'static[usize]] = &[
    &[15, 44, 72],
    &[24, 50, 61],
    &[32, 57, 77],
    &[0, 43, 44],
    &[1, 6, 60],
    &[2, 5, 53],
    &[3, 34, 47],
    &[4, 12, 20],
    &[7, 55, 78],
    &[8, 63, 68],
    &[9, 18, 65],
    &[10, 35, 59],
    &[11, 36, 57],
    &[13, 31, 42],
    &[14, 62, 79],
    &[16, 27, 76],
    &[17, 73, 82],
    &[21, 52, 80],
    &[22, 29, 33],
    &[23, 30, 39],
    &[25, 40, 75],
    &[26, 56, 69],
    &[28, 48, 64],
    &[2, 37, 77],
    &[4, 38, 81],
    &[45, 49, 72],
    &[50, 51, 73],
    &[54, 70, 71],
    &[43, 66, 71],
    &[42, 67, 77],
    &[0, 31, 58],
    &[1, 5, 70],
    &[3, 15, 53],
    &[6, 64, 66],
    &[7, 29, 41],
    &[8, 21, 30],
    &[9, 17, 75],
    &[10, 22, 81],
    &[11, 27, 60],
    &[12, 51, 78],
    &[13, 49, 50],
    &[14, 80, 82],
    &[16, 28, 59],
    &[18, 32, 63],
    &[19, 25, 72],
    &[20, 33, 39],
    &[23, 26, 76],
    &[24, 54, 57],
    &[34, 52, 65],
    &[35, 47, 67],
    &[36, 45, 74],
    &[37, 44, 46],
    &[38, 56, 68],
    &[40, 55, 61],
    &[19, 48, 52],
    &[45, 51, 62],
    &[44, 69, 74],
    &[26, 34, 79],
    &[0, 14, 29],
    &[1, 67, 79],
    &[2, 35, 50],
    &[3, 27, 50],
    &[4, 30, 55],
    &[5, 19, 36],
    &[6, 39, 81],
    &[7, 59, 68],
    &[8, 9, 48],
    &[10, 43, 56],
    &[11, 38, 58],
    &[12, 23, 54],
    &[13, 20, 64],
    &[15, 70, 77],
    &[16, 29, 75],
    &[17, 24, 79],
    &[18, 60, 82],
    &[21, 37, 76],
    &[22, 40, 49],
    &[6, 25, 57],
    &[28, 31, 80],
    &[32, 39, 72],
    &[17, 33, 47],
    &[12, 41, 63],
    &[4, 25, 42],
    &[46, 68, 71],
    &[53, 54, 69],
    &[44, 61, 67],
    &[9, 62, 66],
    &[13, 65, 71],
    &[21, 59, 73],
    &[34, 38, 78],
    &[0, 45, 63],
    &[0, 23, 65],
    &[1, 4, 69],
    &[2, 30, 64],
    &[3, 48, 57],
    &[0, 3, 4],
    &[5, 59, 66],
    &[6, 31, 74],
    &[7, 47, 81],
    &[8, 34, 40],
    &[9, 38, 61],
    &[10, 13, 60],
    &[11, 70, 73],
    &[12, 22, 77],
    &[10, 34, 54],
    &[14, 15, 78],
    &[6, 8, 15],
    &[16, 53, 62],
    &[17, 49, 56],
    &[18, 29, 46],
    &[19, 63, 79],
    &[20, 27, 68],
    &[21, 24, 42],
    &[12, 21, 36],
    &[1, 46, 50],
    &[22, 53, 73],
    &[25, 33, 71],
    &[26, 35, 36],
    &[20, 35, 62],
    &[28, 39, 43],
    &[18, 25, 56],
    &[2, 45, 81],
    &[13, 14, 57],
    &[32, 51, 52],
    &[29, 42, 51],
    &[5, 8, 51],
    &[26, 32, 64],
    &[24, 68, 72],
    &[37, 54, 82],
    &[19, 38, 76],
    &[17, 28, 55],
    &[31, 47, 70],
    &[41, 50, 58],
    &[27, 43, 78],
    &[33, 59, 61],
    &[30, 44, 60],
    &[45, 67, 76],
    &[5, 23, 75],
    &[7, 9, 77],
    &[39, 40, 69],
    &[16, 49, 52],
    &[41, 65, 67],
    &[3, 21, 71],
    &[35, 63, 80],
    &[12, 28, 46],
    &[1, 7, 80],
    &[55, 66, 72],
    &[4, 37, 49],
    &[11, 37, 63],
    &[58, 71, 79],
    &[2, 25, 78],
    &[44, 75, 80],
    &[0, 64, 73],
    &[6, 17, 76],
    &[10, 55, 58],
    &[13, 38, 53],
    &[15, 36, 65],
    &[9, 27, 54],
    &[14, 59, 69],
    &[16, 24, 81],
    &[19, 29, 30],
    &[11, 66, 67],
    &[22, 74, 79],
    &[26, 31, 61],
    &[23, 68, 74],
    &[18, 20, 70],
    &[33, 52, 60],
    &[34, 45, 46],
    &[32, 58, 75],
    &[39, 42, 82],
    &[40, 41, 62],
    &[48, 74, 82],
    &[19, 43, 47],
    &[41, 48, 56]
];

// https://sourceforge.net/p/wsjt/wsjtx/ci/master/tree/lib/ft8/ldpc_174_91_c_parity.f90
// Because it was fortran, all the indicies were 1 based, so subtracted 1 from each. 
// Because it was a one dimmensional array, needed to nest them
pub const FT8_LDPC_CHECK_TO_VALUE: &'static [&'static[usize]] = &[
    &[3, 30, 58, 90, 91, 95, 152],
    &[4, 31, 59, 92, 114, 145],
    &[5, 23, 60, 93, 121, 150],
    &[6, 32, 61, 94, 95, 142],
    &[7, 24, 62, 82, 92, 95, 147],
    &[5, 31, 63, 96, 125, 137],
    &[4, 33, 64, 77, 97, 106, 153],
    &[8, 34, 65, 98, 138, 145],
    &[9, 35, 66, 99, 106, 125],
    &[10, 36, 66, 86, 100, 138, 157],
    &[11, 37, 67, 101, 104, 154],
    &[12, 38, 68, 102, 148, 161],
    &[7, 39, 69, 81, 103, 113, 144],
    &[13, 40, 70, 87, 101, 122, 155],
    &[14, 41, 58, 105, 122, 158],
    &[0, 32, 71, 105, 106, 156],
    &[15, 42, 72, 107, 140, 159],
    &[16, 36, 73, 80, 108, 130, 153],
    &[10, 43, 74, 109, 120, 165],
    &[44, 54, 63, 110, 129, 160, 172],
    &[7, 45, 70, 111, 118, 165],
    &[17, 35, 75, 88, 112, 113, 142],
    &[18, 37, 76, 103, 115, 162],
    &[19, 46, 69, 91, 137, 164],
    &[1, 47, 73, 112, 127, 159],
    &[20, 44, 77, 82, 116, 120, 150],
    &[21, 46, 57, 117, 126, 163],
    &[15, 38, 61, 111, 133, 157],
    &[22, 42, 78, 119, 130, 144],
    &[18, 34, 58, 72, 109, 124, 160],
    &[19, 35, 62, 93, 135, 160],
    &[13, 30, 78, 97, 131, 163],
    &[2, 43, 79, 123, 126, 168],
    &[18, 45, 80, 116, 134, 166],
    &[6, 48, 57, 89, 99, 104, 167],
    &[11, 49, 60, 117, 118, 143],
    &[12, 50, 63, 113, 117, 156],
    &[23, 51, 75, 128, 147, 148],
    &[24, 52, 68, 89, 100, 129, 155],
    &[19, 45, 64, 79, 119, 139, 169],
    &[20, 53, 76, 99, 139, 170],
    &[34, 81, 132, 141, 170, 173],
    &[13, 29, 82, 112, 124, 169],
    &[3, 28, 67, 119, 133, 172],
    &[0, 3, 51, 56, 85, 135, 151],
    &[25, 50, 55, 90, 121, 136, 167],
    &[51, 83, 109, 114, 144, 167],
    &[6, 49, 80, 98, 131, 172],
    &[22, 54, 66, 94, 171, 173],
    &[25, 40, 76, 108, 140, 147],
    &[1, 26, 40, 60, 61, 114, 132],
    &[26, 39, 55, 123, 124, 125],
    &[17, 48, 54, 123, 140, 166],
    &[5, 32, 84, 107, 115, 155],
    &[27, 47, 69, 84, 104, 128, 157],
    &[8, 53, 62, 130, 146, 154],
    &[21, 52, 67, 108, 120, 173],
    &[2, 12, 47, 77, 94, 122],
    &[30, 68, 132, 149, 154, 168],
    &[11, 42, 65, 88, 96, 134, 158],
    &[4, 38, 74, 101, 135, 166],
    &[1, 53, 85, 100, 134, 163],
    &[14, 55, 86, 107, 118, 170],
    &[9, 43, 81, 90, 110, 143, 148],
    &[22, 33, 70, 93, 126, 152],
    &[10, 48, 87, 91, 141, 156],
    &[28, 33, 86, 96, 146, 161],
    &[29, 49, 59, 85, 136, 141, 161],
    &[9, 52, 65, 83, 111, 127, 164],
    &[21, 56, 84, 92, 139, 158],
    &[27, 31, 71, 102, 131, 165],
    &[27, 28, 83, 87, 116, 142, 149],
    &[0, 25, 44, 79, 127, 146],
    &[16, 26, 88, 102, 115, 152],
    &[50, 56, 97, 162, 164, 171],
    &[20, 36, 72, 137, 151, 168],
    &[15, 46, 75, 129, 136, 153],
    &[2, 23, 29, 71, 103, 138],
    &[8, 39, 89, 105, 133, 150],
    &[14, 57, 59, 73, 110, 149, 162],
    &[17, 41, 78, 143, 145, 151],
    &[24, 37, 64, 98, 121, 159],
    &[16, 41, 74, 128, 169, 171]
];