#[cfg(test)]
mod tests {
    use crate::message::Message;

    macro_rules! assert_parse_successfully {
        ($name:ident, $message:expr, $expected_message:expr, $message_bits:expr) => {
            paste::item! {
                mod [< with_ $name:lower >] {
                    use super::*;

                    #[test]
                    fn packed_string_is_correct() {
                        let m = Message::try_from($message).unwrap();
                        assert_eq!(format!("{m}"), $expected_message);
                    }

                    #[test]
                    fn packed_bits_are_correct() {
                        let message = Message::try_from($message).unwrap().message;
                        assert_eq!(message, $message_bits);
                    }

                }
            }
        }
    }

    mod wsjtx_tests {
        use super::*;

        // all of these tests are from wsjtx source code
        // src/wsjtx/lib/ft8/ft8_testmsg.f90
        // ran through ft8sim to determine the expected output for the tests below
        // example:
        // $ build/wsjtx-prefix/src/wsjtx-build/ft8sim "TNX BOB 73 GL" 1500 0 0 0 1 -10
        //   Decoded message: TNX BOB 73 GL                           i3.n3: 0.0
        //   f0: 1500.000   DT:  0.00   TxT:  12.6   SNR: -10.0  BW:50.0

        //   Message bits:
        //   01100011111011011100111011100010101001001010111000000111111101010000000000000

        //   Channel symbols:
        //   3140652207447147063336401773500017703140652646427306546072440503670130533140652
        //      1   0.00 1500.00  -10.0  000000_000001.wav   -9.99

        assert_parse_successfully!(wsjtx_1, "TNX BOB 73 GL", "TNX BOB 73 GL",  0b01100011111011011100111011100010101001001010111000000111111101010000000000000);
        assert_parse_successfully!(wsjtx_2, "K1ABC RR73; W9XYZ <KH1/KH7Z> -08", "K1ABC RR73; W9XYZ <KH1/KH7Z> -08",  0b00001001101111011110001101010000110000101001001110111000001100100101011001000);
        assert_parse_successfully!(wsjtx_3, "PA9XYZ 590003 IO91NP", "PA9XYZ 590003",  0b01010101110011101110111101001101100000001101011111011010111101111011010000000);
        assert_parse_successfully!(wsjtx_4, "G4ABC/P R 570007 JO22DB", "G4ABC/P R 570",  0b00110111111100010101011110000110110000011010100000000111001011111101001000000);
        assert_parse_successfully!(wsjtx_5, "K1ABC W9XYZ 6A WI", "K1ABC W9XYZ 6A WI",  0b00001001101111011110001101010000110000101001001110111000001010001001100011000);
        assert_parse_successfully!(wsjtx_6, "W9XYZ K1ABC R 17B EMA", "W9XYZ K1ABC R 17B EMA",  0b00001100001010010011101110000000100110111101111000110101100000010001011100000);
        assert_parse_successfully!(wsjtx_7, "123456789ABCDEF012", "123456789ABCDEF012",  0b00100100011010001010110011110001001101010111100110111101111000000010010101000);
        assert_parse_successfully!(wsjtx_8, "CQ K1ABC FN42", "CQ K1ABC FN42",  0b00000000000000000000000000100000010011011110111100011010100010100001100110001);
        assert_parse_successfully!(wsjtx_9, "K1ABC W9XYZ EN37", "K1ABC W9XYZ EN37",  0b00001001101111011110001101010000011000010100100111011100000010000101011001001);
        assert_parse_successfully!(wsjtx_10, "W9XYZ K1ABC -11", "W9XYZ K1ABC -11",  0b00001100001010010011101110000000010011011110111100011010100111111010101000001);
        assert_parse_successfully!(wsjtx_11, "K1ABC W9XYZ R-09", "K1ABC W9XYZ R-09",  0b00001001101111011110001101010000011000010100100111011100001111111010101010001);
        assert_parse_successfully!(wsjtx_12, "W9XYZ K1ABC RRR", "W9XYZ K1ABC RRR",  0b00001100001010010011101110000000010011011110111100011010100111111010010010001);
        assert_parse_successfully!(wsjtx_13, "K1ABC W9XYZ 73", "K1ABC W9XYZ 73",  0b00001001101111011110001101010000011000010100100111011100000111111010010100001);
        assert_parse_successfully!(wsjtx_14, "K1ABC W9XYZ RR73", "K1ABC W9XYZ RR73",  0b00001001101111011110001101010000011000010100100111011100000111111001110101001);
        assert_parse_successfully!(wsjtx_15, "CQ FD K1ABC FN42", "CQ FD K1ABC FN42",  0b00000000000000000100100100010000010011011110111100011010100010100001100110001);
        assert_parse_successfully!(wsjtx_16, "CQ TEST K1ABC/R FN42", "CQ TEST K1ABC/R FN42",  0b00000000011000010101111110010000010011011110111100011010110010100001100110001);
        assert_parse_successfully!(wsjtx_17, "K1ABC/R W9XYZ EN37", "K1ABC/R W9XYZ EN37",  0b00001001101111011110001101011000011000010100100111011100000010000101011001001);
        assert_parse_successfully!(wsjtx_18, "W9XYZ K1ABC/R R FN42", "W9XYZ K1ABC/R R FN42",  0b00001100001010010011101110000000010011011110111100011010111010100001100110001);
        assert_parse_successfully!(wsjtx_19, "K1ABC/R W9XYZ RR73", "K1ABC/R W9XYZ RR73",  0b00001001101111011110001101011000011000010100100111011100000111111001110101001);
        assert_parse_successfully!(wsjtx_20, "CQ TEST K1ABC FN42", "CQ TEST K1ABC FN42",  0b00000000011000010101111110010000010011011110111100011010100010100001100110001);
        assert_parse_successfully!(wsjtx_21, "W9XYZ <PJ4/K1ABC> -11", "W9XYZ <PJ4/K1ABC> -11",  0b00001100001010010011101110000000000110101001010110000101000111111010101000001);
        assert_parse_successfully!(wsjtx_22, "<PJ4/K1ABC> W9XYZ R-09", "<PJ4/K1ABC> W9XYZ R-09",  0b00000011010100101011000010100000011000010100100111011100001111111010101010001);
        assert_parse_successfully!(wsjtx_23, "CQ W9XYZ EN37", "CQ W9XYZ EN37",  0b00000000000000000000000000100000011000010100100111011100000010000101011001001);
        assert_parse_successfully!(wsjtx_24, "<YW18FIFA> W9XYZ -11", "<YW18FIFA> W9XYZ -11",  0b00000010101101000010101011000000011000010100100111011100000111111010101000001);
        assert_parse_successfully!(wsjtx_25, "W9XYZ <YW18FIFA> R-09", "W9XYZ <YW18FIFA> R-09",  0b00001100001010010011101110000000000101011010000101010110001111111010101010001);
        assert_parse_successfully!(wsjtx_26, "<YW18FIFA> KA1ABC", "<YW18FIFA> KA1ABC",  0b00000010101101000010101011000100101011100011001010010000100111111010010001001);
        assert_parse_successfully!(wsjtx_27, "KA1ABC <YW18FIFA> -11", "KA1ABC <YW18FIFA> -11",  0b10010101110001100101001000010000000101011010000101010110000111111010101000001);
        assert_parse_successfully!(wsjtx_28, "<YW18FIFA> KA1ABC R-17", "<YW18FIFA> KA1ABC R-17",  0b00000010101101000010101011000100101011100011001010010000101111111010100010001);
        assert_parse_successfully!(wsjtx_29, "<YW18FIFA> KA1ABC 73", "<YW18FIFA> KA1ABC 73",  0b00000010101101000010101011000100101011100011001010010000100111111010010100001);
        assert_parse_successfully!(wsjtx_30, "CQ G4ABC/P IO91", "CQ G4ABC/P IO91",  0b00000000000000000000000000100000010010000110000010110011010011111000010011010);
        assert_parse_successfully!(wsjtx_31, "G4ABC/P PA9XYZ JO22", "G4ABC/P PA9XYZ JO22",  0b00001001000011000001011001101101101111011101011000101010000100010011010110010);
        assert_parse_successfully!(wsjtx_32, "PA9XYZ G4ABC/P RR73", "PA9XYZ G4ABC/P RR73",  0b10110111101110101100010101000000010010000110000010110011010111111001110101010);
        assert_parse_successfully!(wsjtx_33, "K1ABC W9XYZ 579 WI", "K1ABC W9XYZ 579 WI",  0b00000100110111101111000110101000011000010100100111011100001011111101110001011);
        assert_parse_successfully!(wsjtx_34, "W9XYZ K1ABC R 589 MA", "W9XYZ K1ABC R 589 MA",  0b00000110000101001001110111000000010011011110111100011010111101111101010101011);
        assert_parse_successfully!(wsjtx_35, "K1ABC KA0DEF 559 MO", "K1ABC KA0DEF 559 MO",  0b00000100110111101111000110101100101011100001000010001110100111111101011001011);
        assert_parse_successfully!(wsjtx_36, "TU; KA0DEF K1ABC R 569 MA", "TU; KA0DEF K1ABC R 569 MA",  0b11001010111000010000100011101000010011011110111100011010111001111101010101011);
        assert_parse_successfully!(wsjtx_37, "KA1ABC G3AAA 529 0013", "KA1ABC G3AAA 529 0013",  0b01001010111000110010100100001000010010000011101000110011000000000000001101011);
        assert_parse_successfully!(wsjtx_38, "TU; G3AAA K1ABC R 559 MA", "TU; G3AAA K1ABC R 559 MA",  0b10000100100000111010001100110000010011011110111100011010110111111101010101011);
        assert_parse_successfully!(wsjtx_39, "CQ KH1/KH7Z", "CQ KH1/KH7Z",  0b00110010011000000000000000001000111100000110100011001110110000001001000001100);
        assert_parse_successfully!(wsjtx_40, "CQ PJ4/K1ABC", "CQ PJ4/K1ABC",  0b01010110101100000000000110100011101000110001000111001010101000000000010001100);
        assert_parse_successfully!(wsjtx_41, "PJ4/K1ABC <W9XYZ>", "PJ4/K1ABC <W9XYZ>",  0b11110011000100000000000110100011101000110001000111001010101000000000011000100);
        assert_parse_successfully!(wsjtx_42, "<W9XYZ> PJ4/K1ABC RRR", "<W9XYZ> PJ4/K1ABC RRR",  0b11110011000100000000000110100011101000110001000111001010101000000000010010100);
        assert_parse_successfully!(wsjtx_43, "PJ4/K1ABC <W9XYZ> 73", "PJ4/K1ABC <W9XYZ> 73",  0b11110011000100000000000110100011101000110001000111001010101000000000011110100);
        assert_parse_successfully!(wsjtx_44, "<W9XYZ> YW18FIFA", "<W9XYZ> YW18FIFA",  0b11110011000100000000000000001110111011100011100111111010101100001001110000100);
        assert_parse_successfully!(wsjtx_45, "YW18FIFA <W9XYZ> RRR", "YW18FIFA <W9XYZ> RRR",  0b11110011000100000000000000001110111011100011100111111010101100001001111010100);
        assert_parse_successfully!(wsjtx_46, "<W9XYZ> YW18FIFA 73", "<W9XYZ> YW18FIFA 73",  0b11110011000100000000000000001110111011100011100111111010101100001001110110100);
        assert_parse_successfully!(wsjtx_47, "CQ YW18FIFA", "CQ YW18FIFA",  0b00101111000100000000000000001110111011100011100111111010101100001001110001100);
        assert_parse_successfully!(wsjtx_48, "<KA1ABC> YW18FIFA RR73", "<KA1ABC> YW18FIFA RR73",  0b00101101001100000000000000001110111011100011100111111010101100001001110100100);
    }
}